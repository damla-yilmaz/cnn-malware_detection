# -*- coding: utf-8 -*-
"""Deneme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/168fdtsxlLcziD80PqduSByol5qa1Xrb0
"""

from google.colab import drive
drive.mount('/content/drive')

!ls '/content/drive/My Drive'

import os
os.chdir("/content/drive/My Drive/Malware")
!pwd

import sys
import os
import numpy as np
import matplotlib.pyplot as plt

path_root = "/content/drive/My Drive/Malware/300/TRAIN"

from keras.preprocessing.image import ImageDataGenerator
train_batches = ImageDataGenerator().flow_from_directory(directory=path_root, target_size=(64,64), batch_size=4000)

"""target_size = (300,300) yüklenmesi çok uzun
(64,64) veya (48,48)
"""

train_batches.class_indices

imgs, labels = next(train_batches)

imgs.shape

labels.shape

# plots images with labels within jupyter notebook
def plots(ims, figsize=(20,30), rows=10, interp=False, titles=None):
    if type(ims[0]) is np.ndarray:
        ims = np.array(ims).astype(np.uint8)
        if (ims.shape[-1] != 3):
            ims = ims.transpose((0,2,3,1))
    f = plt.figure(figsize=figsize)
    cols = 10 # len(ims)//rows if len(ims) % 2 == 0 else len(ims)//rows + 1
    for i in range(0,50):
        sp = f.add_subplot(rows, cols, i+1)
        sp.axis('Off')
        if titles is not None:
            sp.set_title(list(train_batches.class_indices.keys())[np.argmax(titles[i])], fontsize=16)
        plt.imshow(ims[i], interpolation=None if interp else 'none')

plots(imgs, titles = labels)

classes = train_batches.class_indices.keys()

perc = (sum(labels)/labels.shape[0])*100

plt.xticks(rotation='vertical')
plt.bar(classes,perc)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(imgs/255.,labels, test_size=0.3)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

import keras
from keras.models import Sequential, Input, Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import BatchNormalization

num_classes = 11

def malware_model():
    Malware_model = Sequential()
    Malware_model.add(Conv2D(30, kernel_size=(3, 3),
                     activation='relu',
                     input_shape=(64,64,3)))

    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Conv2D(15, (3, 3), activation='relu'))
    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Dropout(0.25))
    Malware_model.add(Flatten())
    Malware_model.add(Dense(128, activation='relu'))
    Malware_model.add(Dropout(0.5))
    Malware_model.add(Dense(50, activation='relu'))
    Malware_model.add(Dense(num_classes, activation='softmax'))
    Malware_model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])
    return Malware_model

Malware_model = malware_model()

Malware_model.summary()

y_train.shape

y_train_new = np.argmax(y_train, axis=1)

y_train_new

from sklearn.utils import class_weight
class_weights = class_weight.compute_class_weight('balanced',
                                                 classes = np.unique(y_train_new),
                                                 y = y_train_new)

Malware_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, verbose=1)
#Malware_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10,  class_weight=class_weights)

scores = Malware_model.evaluate(X_test, y_test)

print('Final CNN accuracy: ', scores[1])

import numpy as np
import pandas as pd

#y_pred = Malware_model.predict(X_test, verbose=0)

#predict_y=Malware_model.predict(X_test) 
#classes_y=np.argmax(predict_x,axis=1)

y_pred = np.argmax(Malware_model.predict(X_test), axis=-1)

y_pred

y_test2 = np.argmax(y_test, axis=1)

y_test2

from sklearn import metrics
c_matrix = metrics.confusion_matrix(y_test2, y_pred)

import seaborn as sns
def confusion_matrix(confusion_matrix, class_names, figsize = (10,7), fontsize=14):
    """Prints a confusion matrix, as returned by sklearn.metrics.confusion_matrix, as a heatmap.
    
    Arguments
    ---------
    confusion_matrix: numpy.ndarray
        The numpy.ndarray object returned from a call to sklearn.metrics.confusion_matrix. 
        Similarly constructed ndarrays can also be used.
    class_names: list
        An ordered list of class names, in the order they index the given confusion matrix.
    figsize: tuple
        A 2-long tuple, the first value determining the horizontal size of the ouputted figure,
        the second determining the vertical size. Defaults to (10,7).
    fontsize: int
        Font size for axes labels. Defaults to 14.
    """
    df_cm = pd.DataFrame(
        confusion_matrix, index=class_names, columns=class_names, 
    )
    fig = plt.figure(figsize=figsize)
    try:
        heatmap = sns.heatmap(df_cm, annot=True, fmt="d")
    except ValueError:
        raise ValueError("Confusion matrix values must be integers.")
    heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=fontsize)
    heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=fontsize)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

class_names= train_batches.class_indices.keys()
confusion_matrix(c_matrix, class_names, figsize = (20,7), fontsize=14)

